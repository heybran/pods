(()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.defer=(window.requestIdleCallback||requestAnimationFrame).bind(window),window.addEventListener("scroll",this.setPositionOnScroll.bind(this))}connectedCallback(){this.ariaExpanded="false",this.shadowRoot.innerHTML=`\n      <style>${this.constructor.css}</style>\n      <div part="wrapper" class="tooltip-wrapper">\n        <button \n          part="button" \n          class="tooltip-button" \n          onfocusin="this.getRootNode().host.openTooltip()"\n          >\n          <svg xmlns="http://www.w3.org/2000/svg" role="presentation" aria-hidden="true" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-help-circle"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>\n          <span class="sr-only"></span>\n        </button>\n        <div slot="content" class="tooltip-content">\n          ${this.innerHTML}\n        </div>\n      </div>\n    `,this.tooltipContent.addEventListener("transitionend",(()=>{this.tooltipContent.classList.contains("visible")?this.ariaExpanded="true":this.ariaExpanded="false"})),this.defer((()=>{this.innerHTML="\x3c!-- Original content has been moved into shadowRoot --\x3e"}))}get button(){return this.shadowRoot.querySelector("button")}get buttonWidth(){return this.button.getBoundingClientRect().width}get tooltipContent(){return this.shadowRoot.querySelector(".tooltip-content")}get tooltipContentHeight(){return this.tooltipContent.getBoundingClientRect().height}static closeTooltip(){this.tooltipContent.classList.remove("visible"),this.removeEventListener("focusout",t.closeTooltip)}openTooltip(){this.setPosition(),this.tooltipContent.classList.add("visible"),this.addEventListener("focusout",t.closeTooltip)}setPosition(){const{left:t,top:n}=this.button.getBoundingClientRect(),o=n-this.tooltipContentHeight-2,e=t+this.buttonWidth/2;this.style.setProperty("--tooltip-left",`${e}px`),this.style.setProperty("--tooltip-top",`${o}px`)}setPositionOnScroll(){"false"!==this.ariaExpanded&&this.setPosition()}static get css(){return"\n    :host {\n      display: inline-flex;\n      --tooltip-arrow-size: 12px;\n    }\n    \n    svg {\n      width: 18px;\n      height: 18px;\n    }\n    \n    button {\n      background: transparent;\n      border: none;\n      border-radius: 50%;\n      padding: 0;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      color: inherit;\n    }\n    \n    button:is(:hover, :focus-visible, :focus) {\n      outline-offset: 2px;\n      outline: 1px auto #007cba;\n    }\n    \n    .tooltip-wrapper {\n      position: relative;\n      display: inline-flex;\n    }\n    \n    .tooltip-content {\n      position: fixed;\n      opacity: 0;\n      pointer-events: none;\n      background-color: var(--tooltip-background-color, #333);\n      border-radius: 4px;\n      padding: 1em 1.2em;\n      left: var(--tooltip-left);\n      top: calc(var(--tooltip-top) - var(--tooltip-arrow-size));\n      transform: translateX(-50%);\n      transition: opacity .3s ease;\n      will-change: opacity;\n      width: max(25em, 300px);\n      z-index: 99999;\n      display: grid;\n      gap: .75em;\n      color: #fff;\n    }\n    \n    .tooltip-content * {\n      color: inherit;\n      margin: 0;\n    }\n    \n    .tooltip-content::before {\n      content: '';\n      position: absolute;\n      bottom: calc(var(--tooltip-arrow-size) * -0.5);\n      left: 0;\n      border-width: 8px 8px 0;\n      border-top-color: initial;\n      width: var(--tooltip-arrow-size);\n      height: var(--tooltip-arrow-size);\n      background: var(--tooltip-background-color, #333);\n      transform: rotate(45deg);\n      left: calc(50% - var(--tooltip-arrow-size) / 2);\n    }\n    \n    .tooltip-content.visible {\n      opacity: 1;\n      pointer-events: initial;\n    }\n    "}}customElements.define("pods-tooltip",t)})();